<?php
namespace clarinet\persister;

use \PDO;
use \PDOException;

use \clarinet\Clarinet;
use \clarinet\Criteria;
use \clarinet\Exception;
use \clarinet\PDOWrapper;

use \clarinet\validator\${actor} as Validator;

/**
 * This is a persister class generated by Clarinet.  Do NOT modify this file.
 * Instead, modify the model class of this persister, then run the clarinet
 * generator to re-generate this file.
 */
class ${actor} {

  private $_cache = Array();

  private $_pdo = null;

  private $_create = null;
  private $_update = null;
  private $_delete = null;


  public function __construct() {
    $this->_pdo = PDOWrapper::get();

    $this->_create = $this->_pdo->prepare(
      "INSERT INTO ${table} (${column_names}) VALUES (${value_names})");

    $this->_update = $this->_pdo->prepare(
      "UPDATE ${table} SET ${sql_setters} WHERE ${id_column} = :id");

    $this->_delete = $this->_pdo->prepare(
      "DELETE FROM ${table} WHERE ${id_column} = :id");
  }

  public function getById($id) {
    if (!isset($this->_cache[$id])) {
      $c = new Criteria();
      $c->addEquals('${id_column}', $id);

      // We don't care about the result since the retrieve method will
      // populate the cache
      $this->retrieve($c);
      
      if (!isset($this->_cache[$id])) {
        throw new Exception("No ${class_str} exists with id $id");
      }
    }
    return $this->_cache[$id];
  }

  public function create(\${class} $model) {
    $validator = new Validator();
    $e = $validator->validate($model);
    if ($e !== null) {
      throw $e;
    }

    try {
      $this->_pdo->beginTransaction();

      $params = Array();
      ${populate_parameters}

      $this->_create->execute($params);
      $id = $this->_pdo->lastInsertId();
      $this->_pdo->commit();

      $model->set${id_property}($id);
      $this->_cache[$id] = $model;

      return $id;
    } catch (PDOException $e) {
      $this->_pdo->rollback();

      throw new Exception('Error creating ${class_str}: ' . $e->getMessage(), $e);
    }
  }

  public function retrieve(Criteria $c = null) {
    if ($c === null) {
      $c = new Criteria();
    }

    if ($c->getTable() === null) {
      $c->setTable('${table}');
    }

    $sql = $c->__toString();
    try {

      $stmt = $this->_pdo->prepare($sql);
      $stmt->setFetchMode(PDO::FETCH_ASSOC);

      $params = ($c !== null) ? $c->getParameters() : null;
      $stmt->execute($params);

      $result = Array();
      foreach ($stmt AS $row) {
        $id = $row['${id_column}'];

        // Don't allow two instances for the same id to be created
        if (isset($this->_cache[$id])) {
          $result[] = $this->_cache[$id];
          continue;
        }

        $model = new \${class}();
        $model->set${id_property}($id);

        // Cache the instance before populating any relationships in order to
        // prevent inifinite loops when loading models that have a
        // relationship that is declared on both sides
        $this->_cache[$id] = $model;

        // Populate the model's properties
        ${populate_properties}

        // Populate any relationships
        ${populate_relationships}

        $result[] = $model;
      }

      return $result;
    } catch (PDOException $e) {
      throw new Exception("Error retrieving ${class_str} instances: {$e->getMessage()}", $e);
    }
  }

  public function update(\${class} $model) {
    $validator = new Validator();
    if ($e !== null) {
      throw $e;
    }

    $id = $model->get${id_property}();
    if ($id === null) {
      throw new Exception("Can't update ${class_str} because it does not have an id");
    }

    try {
      $this->_pdo->beginTransaction();

      $params = Array();
      $params[':id'] = $id;
      ${populate_parameters}

      $this->_update->execute($params);
      $rowCount = $this->_update->rowCount();

      $this->_pdo->commit();
      return $rowCount;
    } catch (PDOException $e) {
      $this->_pdo->rollback();

      throw new Exception("Error updating ${class_str}: {$e->getMessage()}", $e);
    }
  }

  public function delete(\${class} $model) {
    $id = $model->get${id_property}();
    if ($id === null) {
      throw new Exception("Can't delete ${class_str} because it does not have an id");
    }

    $params = Array();
    $params[':id'] = $id;

    try {
      $this->_pdo->beginTransaction();
      $this->_delete->execute($params);
      $rowCount = $this->_delete->rowCount();
      $this->_pdo->commit();

      return $rowCount();
    } catch (PDOException $e) {
      $this->_pdo->rollback();

      throw new Exception("Error deleting ${class_str}: {$e->getMessage()}", $e);
    }
  }
}
