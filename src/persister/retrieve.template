  public function retrieve(Criteria $c = null) {
    if ($c->getTable() === null) {
      $c->setTable('${table}');
    }

    $sql = $c->__toString();
    // TODO - Log the statement, this depends on a logging framework being added to reed
    $stmt = $this->_pdo->prepare($sql);
    $stmt->setFetchMode(PDO::FETCH_ASSOC);

    try {
      $params = ($c !== null) ? $c->getParameters() : null;
      $stmt->execute($params);
      
      $result = Array();
      foreach ($stmt AS $row) {
        $id = $row['${id_column}'];

        // Don't allow two instances for the same id to be created
        if (isset($this->_cache[$id])) {
          $result[] = $this->_cache[$id];
          continue;
        } 

        $model = new \${class}();
        $model->set${id_property}($row['${id_column}']);
${populate_properties}

        // Cache the instance before populating any relationships in order to
        // prevent inifinite loops when loading models that have a
        // relationship that is declared on both sides
        $this->_cache[$id] = $model;

        // Populate any relationships
${populate_relationships}

        $result[] = $model;
      }

      return $result;
    } catch (PDOException $e) {
      throw new Exception('Error retrieving ${class} instances', $e);
    }
  }
