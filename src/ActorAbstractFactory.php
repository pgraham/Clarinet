<?php
/**
 * =============================================================================
 * Copyright (c) 2011, Philip Graham
 * All rights reserved.
 *
 * This file is part of Clarinet and is licensed by the Copyright holder under
 * the 3-clause BSD License.  The full text of the license can be found in the
 * LICENSE.txt file included in the root directory of this distribution or at
 * the link below.
 * =============================================================================
 *
 * @license http://www.opensource.org/licenses/bsd-license.php
 * @package clarinet
 */
namespace clarinet;

/**
 * This class creates Factory classes for model actors.  A model actor is any of
 * the classes generated by Clarinet for a specific model.  The factories
 * returned by this class can be used to instantiate actors of their specified
 * type for specific model classes
 *
 * @author Philip Graham <philip@zeptech.ca>
 * @package clarinet
 */
class ActorAbstractFactory {

  private static $_factories = Array();

  /**
   * This methods first loads a factory for the given type of actor which is
   * then used to create an actor instance for the given model class.
   *
   * @param string $actorType The type of action to retrieve
   * @param string $modelClass The model class that the actor acts upon
   * @return Actor of the specified type for the given type of model
   */
  public static function getActor($actorType, $modelClass) {
    $factory = self::getFactory($actorType);
    $actor = $factory->getActor($modelClass);
    return $actor;
  }

  /**
   * This method loads and returns a factory for the given type of actor.
   *
   * @param string $actorType The type of actor factory to instantiate
   */
  public static function getFactory($actorType) {
    if (!isset(self::$_factories[$actorType])) {
      self::$_factories[$actorType] = new ActorFactory($actorType);
    }
    return self::$_factories[$actorType];
  }
}
