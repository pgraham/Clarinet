Clarinet is licensed under the 3-clause BSD license, the text of which can be
found in the file LICENSE.txt in the same directory as this file.

Clarinet is a PHP ORM with a syntax loosely based on JPA/Hibernate.  However,
Clarinet is nowhere near as feature rich as Hibernate.  It is intended to be
easy and fast to build with.   This makes it ideal for small websites and
prototyping.

First a couple of definitions.  Throughout this guide and the code, you will see
the terms model and entity used interchangeably, sorry about that.  Model is
generally used to refer to the definition of something that can be persisted
while entity is used to refer to an instance of a model.  Although the
documentation is being updated to more consistent in its use of these terms,
there are probably still some spots where model is used instead of entity and
vice-versa.

Model Classes:
--------------

Persistance information is extracted from model classes.  Typically, each table
in your database will be represented by a model class.  An exception being link
tables for a many-to-many relationship, which are handled transparently by
Clarinet.

A model class must follow some simple conventions that make them look a lot like
Java beans.

To start, each model class must annotated with @Entity:

/**
 * @Entity(table = simple_entity)
 */
class SimpleEntity {
  // ...
}

For now the entity annotation must define a 'table' parameter which contains the
name of the database table in which entities are persisted.  This will be
changed in the future so that if the table name is not provided a sensible
default will be chosen.  Most likely the name of the class with camel-casing
switched to lowercase with underscores between the words.

Each model class must define an id column.  An id column is defined through a
getter/setter pair similar to the following:

class SimpleEntity {

  private $_id;
  // ...

  /**
   * @Id
   */
  public function getId() {
    return $this->_id;
  }

  public function setId($id) {
    $this->_id = $id;
  }
}

NOTE: Clarinet will fail if a getXXX method is annotated by something
      understood by clarinet but does not have a matching setXXX method.

The previous code will assume that the column in the database table that
contains the id is named 'id'. To specify a different column you can add a
@Column annotation:

  /**
   * @Id
   * @Column(name = simple_entity_id)
   */
  // ...

The @Column annotation is also used to denote the getter/setter pairs for the
other columns in the table that are handled by Clarinet.  So if the
simple_entity table had a column 'name', you could define a getter/setter pair
something like this:

class SimpleEntity {

  private $_name;
  // ...

  /**
   * @Column(name = name)
   */
  public function getName() {
    return $this->_name;
  }

  public fucntion setName($name) {
    $this->_name = $name;
  }
}

The name parameter to the column annotation is optional.  If it is not present
the name of the column is assumed to be a lowercased version of the XXX part of
getXXX().  So the previous sample could be written as:

  // ...

  /**
   * @Column
   */
  public function getName() {
    return $this->_name;
  }

  // ...

Clarinet also supports relationship definition using annotated getter/setter
pairs.
