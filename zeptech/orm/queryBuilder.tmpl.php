<?php
namespace zeptech\dynamic\orm\querybuilder;

use \zeptech\orm\runtime\Criteria;

/**
 * This is a query builder class generated by clarinet. Do _not_modify this file
 * but instead modify the model class of this query builder and re-generate
 * this file using the appropriate generator.
 */
class ${actor} {

  private $_c;

  private $_joinedTo = array();

  public function __construct() {
    $this->_c = new Criteria();
  }

  public function addFilter($field, $value) {
    if (strpos($field, '.') !== false) {
      list($rel, $prop) = explode('.', $field);
      $this->_addRelFilter($rel, $prop, $value);
    } else {
      $this->_addPropFilter($field, $value);
    }
  }

  public function addSort($field, $dir) {
    if (strpos($field, '.') !== false) {
      list($rel, $prop) = explode('.', $field);
      $this->_addRelSort($rel, $prop, $dir);
    } else {
      $this->_addPropSort($field, $dir);
    }
  }

  public function getCriteria() {
    return $this->_c;
  }

  public function setLimit($limit, $offset) {
    $this->_c->setLimit($limit, $offset);
  }

  private function _addPropFilter($propName, $value) {
    $prop = $this->_getProp($propName);
    if ($prop !== null) {
      $this->_c->addEquals($prop['col'], $value);
    } else {
      $this->_c->addEquals($propName, $value);
    }
  }

  private function _addPropSort($propName, $dir) {
    $prop = $this->_getProp($propName);
    if ($prop !== null) {
      $this->_c->addSort($prop['col'], $dir);
    } else {
      $this->_c->addSort($propName, $dir);
    }
  }

  private function _addRelFilter($relName, $propName, $value) {
    $rel = $this->_getRel($relName);
    if ($rel === null || !isset($rel['props'][$propName])) {
      $this->_c->addEquals("$relName.$propName", $value);
    } else {

      $tbl = $rel['tbl'];
      $col = $rel['props'][$propName];
      
      $this->_addRel($rel);
      $this->_c->addEquals("$tbl.$col", $value);
    }
  }

  private function _addRelSort($relName, $propName, $dir) {
    $rel = $this->_getRel($relName);
    if ($rel === null || !isset($rel['props'][$propName])) {
      $this->_c->addSort("$relName.$propName", $dir);
    } else {

      $tbl = $rel['tbl'];
      $col = $rel['props'][$propName];
      
      $this->_addRel($rel);
      $this->_c->addSort("$tbl.$col", $dir);
    }
  }

  private function _addRel($rel) {
    if (in_array($rel['name'], $this->_joinedTo)) {
      return;
    }

    if ($rel['type'] === 'many-to-one') {
      $this->_c->addInnerJoin($rel['tbl'], $rel['lhs_col'], $rel['rhs_id_col']);
    } else if ($rel['type'] === 'one-to-many') {
      $this->_c->addInnerJoin($rel['tbl'], $rel['lhs_id_col'], $rel['rhs_col']);

    } else {
      $this->_c->addInnerJoin($rel['link'], $rel['lhs_id_col'], $rel['link_lhs']);
      $this->_c->chainInnerJoin($rel['tbl'], $rel['link_rhs'], $rel['rhs_id_col']);

    }
    $this->_joinedTo[] = $rel['tbl'];
  }

  private function _getProp($prop) {
    switch ($prop) {
      ${each:properties as prop}
        case '${prop[name]}':
        return ${php:prop};
        break;
      ${done}

      default:
      // Property does not exist so there is nothing to return
      return null;
    }
  }

  private function _getRel($rel) {
    switch ($rel) {
      ${each:relationships as rel}
        case '${rel[name]}':
        return ${php:rel};
        break;
      ${done}

      default:
      // Relationship does not exist so there is nothing to return
      return null;
    }
  }
}
