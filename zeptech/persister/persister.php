<?php
namespace clarinet\persister;

use \PDO;
use \PDOException;

use \clarinet\ActorFactory;
use \clarinet\Criteria;
use \clarinet\Exception;
use \clarinet\Persister;
use \clarinet\PdoWrapper;

/**
 * This is a persister class generated by Clarinet.  Do NOT modify this file.
 * Instead, modify the model class of this persister, then run the clarinet
 * generator to re-generate this file.
 */
class ${actor} {

  /**
   * Entities that in the process of being created are marked with this id so
   * that any right side relationships won't call the create method for the
   * entity a second time.  In particular this will help prevent double creation
   * when saving a mirrored ManyToOneEntity.  This happens because the left side
   * (many side) of the relationship will attempt to create the right side, if
   * it doesn't have an id, before the left side entity has been assigned an id.
   * So the right side persister will see that the left side has a null id and
   * will create it a second time.  So setting an entities id to this marker
   * will let a right side persister know not to re-create or update the entity.
   */
  const CREATE_MARKER = 0;

  /*
   * Delete entities will have an index in the cache but the value will be
   * null.
   */
  private $_cache = array();

  /* PDO Connection to the database in which entities are to be persisted. */
  private $_pdo = null;

  /* PDOStatement for inserting new entities into the database */
  private $_create = null;

  /* PDOStatement for updating existing entities. */
  private $_update = null;

  /* PDOStatement for deleting existing entities. */
  private $_delete = null;

  /**
   * Create a new persister for ${class} entities.
   */
  public function __construct() {
    $this->_pdo = PdoWrapper::get();

    $this->_create = $this->_pdo->prepare(
      "INSERT INTO ${table} (${join:column_names:,}) VALUES (${join:value_names:,})");

    ${if:has_update}
      $this->_update = $this->_pdo->prepare(
        "UPDATE ${table} SET ${join:sql_setters:,} WHERE ${id_column} = :id");
    ${else}
      $this->_update = null;
    ${fi}

    $this->_delete = $this->_pdo->prepare(
      "DELETE FROM ${table} WHERE ${id_column} = :id");
  }

  /**
   * Clear the cache. If an id is provided, only the entity with the given id
   * is cleared.  This will happen when an entity at the many side of an
   * un-mirrored one-to-many relationship is updated to ensure that it does not
   * have a stale id for the one side of the relationship.  The entire cache is
   * generally only cleared during testing.
   *
   * @param mixed $id
   */
  public function clearCache($id = null) {
    if ($id === null) {
      $this->_cache = array();
    } else {
      unset($this->_cache[$id]);
    }
  }

  /**
   * Return a count of all entities that match the given criteria.
   *
   * @param Criteria $c
   * @return integer
   */
  public function count(Criteria $c) {
    if ($c === null) {
      $c = new Criteria();
    }

    if ($c->getTable() === null) {
      $c->setTable('${table}');
    }


    $c->setDistinct(true) // Ensure each entity is only counted once
      ->selectCount()     // Setup the select list to only select COUNT(*)
      ->setLimit(null);   // Remove any limit on the criteria
    $sql = $c->__toString();
    try {

      $stmt = $this->_pdo->prepare($sql);
      $params = $c->getParameters();
      $stmt->execute($params);

      return (int) $stmt->fetchColumn();
    } catch (PDOException $e) {
      throw new Exception("Error retrieving SELECT count: {$e->getMessage()}".
        "\n\n$sql\n", $e);
    }
  }

  /**
   * Insert the given entity into the database.
   *
   * @param ${class} $model
   */
  public function create(\${class} $model) {
    $validator = ActorFactory::getActor('validator', '${class}');
    if (!$validator->validate($model, $e)) {
      throw $e;
    }

    if ($model->get${id_property}() !== null) {
      return $model->get${id_property}();
    }

    ${if:beforeCreate}
      $model->beforeCreate();
    ${fi}

    try {
      $startTransaction = $this->_pdo->beginTransaction();

      $model->set${id_property}(self::CREATE_MARKER);

      $params = Array();
      ${each:properties as prop}

        ${if:prop[type] = boolean}
          $params[':${prop[col]}'] = $model->get${prop[name]}() ? 1 : 0;
        ${else}
          $params[':${prop[col]}'] = $model->get${prop[name]}();
        ${fi}

      ${done}

      ${each:relationships as rel}
        ${if:rel[type] = many-to-one}
          // Populate ${rel[rhs]} parameter
          $rhs = $model->get${rel[lhsProperty]}();
          $rhsId = null;
          if ($rhs !== null) {
            $rhsId = $rhs->get${rel[rhsIdProperty]}();
            if ($rhsId === null) {
              $persister = Persister::get('${rel[rhs]}');
              $rhsId = $persister->create($rhs);
            }
          }
          $params[':${rel[lhsColumn]}'] = $rhsId;
        ${fi}
      ${done}

      $this->_create->execute($params);
      $id = $this->_pdo->lastInsertId();
      $model->set${id_property}($id);
      $this->_cache[$id] = $model;

      $saveLock = SaveLock::acquire();
      $saveLock->lock($model);

      ${each:relationships as rel}
        // ---------------------------------------------------------------------
        // Save related ${rel[rhs]} entities
        $persister = Persister::get('${rel[rhs]}');
        ${if:rel[type] = many-to-many}
          // If any of the related entities are new, save them to ensure that
          // they have an id, then update them.
          $related = $model->get${rel[lhsProperty]}();
          if ($related !== null) {
            foreach($related AS $rel) {
              if ($rel->get${rhsIdProperty}() === null) {
              }
            }
          }

          // Delete all link entries for this entity
          $deleteStmt = $this->_pdo->prepare("DELETE FROM ${rel[linkTable]} WHERE ${rel[lhsLinkColumn]} = :id");
          $deleteStmt->execute(array('id' => $id));

          // Create new link entries for all related entities
          if ($related !== null) {
            $createStmt = $this->_pdo->prepare("INSERT INTO ${rel[linkTable]} (${rel[lhsLinkColumn]}, ${rel[rhsLinkColumn]}) VALUES (:lhsId, :rhsId)");
            foreach ($related AS $rel) {
              $createStmt->execute(array('lhsId' => $id, 'rhsId' => $rel->get${rel[rhsIdProperty]}()));
            }
          }

        ${elseif:rel[type] = one-to-many}
          $related = $model->get${rel[lhsProperty]}();
          if ($related === null) {
            $related = array();
          }

          // Update or save the collection
          ${if:rel[mirrored]}
           foreach ($related AS $rel) {
             $rel->set${rel[rhsProperty]($model);
             $persister->save($model);
           }
          ${else}
            $updateStmt = $this->_pdo->prepare("UPDATE ${rel[rhsTable]} SET ${rel[rhsColumn]} = :id WHERE ${rel[rhsIdColumn]} = :relId");
            foreach ($related AS $rel) {
              if ($rel->get${rel[rhsIdProperty]}() === null) {
                $persister->create($rel);
              }
              $updateStmt->execute(array(
                'id' => $id,
                'relId' => $rel->get${rel[rhsIdProperty]}()
              ));

              // Clear the cache of the RHS entity as it may contain a stale id
              $persister->clearCache($rel->get${rel[rhsIdProperty]}());
            }
          ${fi}
        ${fi}
        // ---------------------------------------------------------------------
      ${done}

      if ($startTransaction) {
        $this->_pdo->commit();
      }

      $saveLock->release();

      ${if:onCreate}
        $model->onCreate();
      ${fi}

      return $id;
    } catch (PDOException $e) {
      $this->_pdo->rollback();
      $model->set${id_property}(null);

      if (isset($saveLock)) {
        $saveLock->forceRelease();
      }

      throw new Exception("Error creating ${class_str}: {$e->getMessage()}", $e);
    }
  }

  /**
   * Delete the given entity.
   *
   * @param ${class} $model
   */
  public function delete(\${class} $model) {
    $id = $model->get${id_property}();
    if ($id === null) {
      throw new Exception("Can't delete ${class_str} because it does not have an id");
    }

    $params = Array();
    $params[':id'] = $id;

    ${if:beforeDelete}
      $model->beforeDelete();
    ${fi}

    try {
      $startTransaction = $this->_pdo->beginTransaction();

      $this->_delete->execute($params);
      $rowCount = $this->_delete->rowCount();

      ${each:relationships AS rel}
        // ---------------------------------------------------------------------
        // Delete related ${rhs} entities
        ${if:rel[type] = one-to-many}
          $persister = Persister::get('${rel[rhs]}');
          $related = $model->get${rel[lhsProperty]}();
          foreach ($related AS $rel) {
            $persister->delete($rel);
          }

        ${elseif:rel[type] = many-to-many}
          $deleteStmt = $this->_pdo->prepare('DELETE FROM ${rel[linkTable]} WHERE ${rel[lhsLinkColumn]} = :id');
          $deleteStmt->execute(array('id' => $id));

        ${fi}
        // ---------------------------------------------------------------------
      ${done}

      if ($startTransaction) {
        $this->_pdo->commit();
      }

      $this->_cache[$id] = null;
      $model->set${id_property}(null);

      ${if:onDelete}
        $model->onDelete();
      ${fi}

      return $rowCount;
    } catch (PDOException $e) {
      $this->_pdo->rollback();

      throw new Exception("Error deleting ${class_str}: {$e->getMessage()}", $e);
    }
  }

  /**
   * Get the entity with the given id.  If no entity with the given id exists
   * then null is returned.
   *
   * @param integer $id
   * @return ${class}
   */
  public function getById($id) {
    if (!isset($this->_cache[$id])) {
      $c = new Criteria();
      $c->addEquals('${id_column}', $id);

      // We don't care about the result since the retrieve method will
      // populate the cache
      $this->retrieve($c);
      
      if (!isset($this->_cache[$id])) {
        return null;
      }
    }
    return $this->_cache[$id];
  }

  /**
   * Retrieve a single entity that matches the given criteria.  If the criteria
   * results in more than one entity being retrieved then an exception is
   * thrown.  If the criteria results in no entities being retrieved then NULL
   * is returned
   *
   * @param Criteria $c Criteria that will result in a single entity
   * @return ${class}
   * @throws Exception if the criteria results in more than one entity.
   */
  public function retrieveOne(Criteria $c) {
    $entities = $this->retrieve($c);

    $num = count($entities);
    if ($num > 1) {
      throw new Exception("Criteria maps to $num entities, expected 1");
    } else if ($num === 0) {
      return null;
    }

    return $entities[0];
  }

  /**
   * Retrieve entities that match the given criteria.  If no criteria then all
   * entities are returned.  If no entities exist or match the criteria then an
   * empty array is returned.
   *
   * @param Criteria $c
   */
  public function retrieve(Criteria $c = null) {
    if ($c === null) {
      $c = new Criteria();
    }

    if ($c->getTable() === null) {
      $c->setTable('${table}');
    }


    // Clear the selects so that the default of all columns for the FROM table
    // are selected and ensure that only distinct entities are returned
    $c->clearSelects()
      ->setDistinct(true);
    $sql = $c->__toString();
    try {

      $stmt = $this->_pdo->prepare($sql);
      $stmt->setFetchMode(PDO::FETCH_ASSOC);

      $params = $c->getParameters();
      $stmt->execute($params);

      $transformer = ActorFactory::getActor('transformer', '${class}');
      $result = Array();
      foreach ($stmt AS $row) {
        $id = $transformer->idFromDb($row['${id_column}']);

        // Don't allow two instances for the same id to be created
        if (isset($this->_cache[$id])) {
          $result[] = $this->_cache[$id];
          continue;
        }

        $model = new \${class}();
        $model->set${id_property}($id);

        // Cache the instance before populating any relationships in order to
        // prevent inifinite loops when loading models that have a
        // relationship that is declared on both sides
        $this->_cache[$id] = $model;

        // Populate the model's properties
        ${each:properties AS prop}
          ${if:prop[type] = boolean}
            $model->set${prop[name]}($row['${prop[col]}'] == 1 ? true : false);

          ${elseif:prop[type] = integer}
            $model->set${prop[name]}((int) $row['${prop[col]}']);

          ${else}
            $model->set${prop[name]}($row['${prop[col]}']);

          ${fi}
        ${done}

        // Populate any relationships
        ${each:relationships AS rel}
          // -------------------------------------------------------------------
          // Populate the ${rel[rhs]}
          ${if:rel[type] = one-to-many}
            $c = new Criteria();
            $c->addEquals('${rel[rhsColumn]}', $id);
            ${if:rel[orderByCol] ISSET}
              $c->addSort('${rel[orderByCol]}', '${rel[orderByDir]}');
            ${fi}

            $persister = Persister::get('${rel[rhs]}');
            $related = $persister->retrieve($c);
            $model->set${rel[lhsProperty]}($related);

          ${elseif:rel[type] = many-to-many}
            $c = new Criteria();
            $c->addSelect('${rel[rhsTable]}.*');
            $c->addJoin('${rel[linkTable]}', '${rel[rhsIdColumn]}', '${rel[rhsLinkColumn]}');
            $c->addEquals('${rel[lhsLinkColumn]}', $id);
            ${if:rel[orderByCol] ISSET}
              $c->addSort('${rel[orderByCol]}', '${rel[orderByDir]}');
            ${fi}

            $persister = Persister::get('${rel[rhs]}');
            $related = $persister->retrieve($c);
            $model->set${rel[lhsProperty]}($related);

          ${elseif:rel[type] = many-to-one}
            $relId = $row['${rel[lhsColumn]}'];
            if ($relId !== null) {
              $persister = Persister::get('${rel[rhs]}');
              $related = $persister->getById($relId);

              if ($related === null) {
                throw new Exception("No ${rel[rhsStr]} with id $relId.");
              }

              $model->set${rel[lhsProperty]}($related);
            }

          ${fi}
          // -------------------------------------------------------------------
        ${done}

        $result[] = $model;
      }

      return $result;
    } catch (PDOException $e) {
      throw new Exception("Error retrieving ${class_str} instances: {$e->getMessage()}\n\n$sql\n", $e);
    }
  }

  /**
   * Saves the given instance by either creating it if it does not have an ID or
   * updating if it does.
   *
   * @param ${class} $model
   */
  public function save(\${class} $model) {
    $id = $model->get${id_property}();
    if ($id === null) {
      $this->create($model);
    } else {
      $this->update($model);
    }
  }

  /**
   * Update the given entity.
   *
   * @param ${class} $model
   */
  public function update(\${class} $model) {
    $id = $model->get${id_property}();
    if ($id === null) {
      throw new Exception("Can't update ${class_str} because it does not have an id");
    }

    if (SaveLock::isLocked($model)) {
      return;
    }

    $validator = ActorFactory::getActor('validator', '${class}');
    if (!$validator->validate($model, $e)) {
      throw $e;
    }

    ${if:beforeUpdate}
      $model->beforeUpdate();
    ${fi}

    try {
      $startTransaction = $this->_pdo->beginTransaction();

      $saveLock = SaveLock::acquire();
      $saveLock->lock($model);

      $params = Array();
      $params[':id'] = $id;
      ${each:properties as prop}
        ${if:prop[type] = boolean}
          $params[':${prop[col]}'] = $model->get${prop[name]}() ? 1 : 0;
        ${else}
          $params[':${prop[col]}'] = $model->get${prop[name]}();
        ${fi}
      ${done}

      ${each:relationships as rel}

        ${if:rel[type] = many-to-one}
          // Populate ${rel[rhs]} parameter
          $rhs = $model->get${rel[lhsProperty]}();
          $rhsId = null;
          if ($rhs !== null) {
            $rhsId = $rhs->get${rel[rhsIdProperty]}();
            if ($rhsId === null) {
              $persister = ActorFactory::getActor('persister', '${rel[rhs]}');
              $rhsId = $persister->create($rhs);
            }
          }
          $params[':${rel[lhsColumn]}'] = $rhsId;
        ${fi}

      ${done}

      ${if:has_update}
        $this->_update->execute($params);
        $rowCount = $this->_update->rowCount();
      ${fi}

      ${each:relationships as rel}
        // ---------------------------------------------------------------------
        // Save related ${rel[rhs]} entities
        $persister = Persister::get('${rel[rhs]}');
        ${if:rel[type] = many-to-many}
          // If any of the related entities are new, save them to ensure that
          // they have an id, then update them.
          $related = $model->get${rel[lhsProperty]}();
          if ($related !== null) {
            foreach($related AS $rel) {
              if ($rel->get${rhsIdProperty}() === null) {
              }
            }
          }

          // Delete all link entries for this entity
          $deleteStmt = $this->_pdo->prepare("DELETE FROM ${rel[linkTable]} WHERE ${rel[lhsLinkColumn]} = :id");
          $deleteStmt->execute(array('id' => $id));

          // Create new link entries for all related entities
          if ($related !== null) {
            $createStmt = $this->_pdo->prepare("INSERT INTO ${rel[linkTable]} (${rel[lhsLinkColumn]}, ${rel[rhsLinkColumn]}) VALUES (:lhsId, :rhsId)");
            foreach ($related AS $rel) {
              $createStmt->execute(array('lhsId' => $id, 'rhsId' => $rel->get${rel[rhsIdProperty]}()));
            }
          }

        ${elseif:rel[type] = one-to-many}
          $related = $model->get${rel[lhsProperty]}();
          if ($related === null) {
            $related = array();
          }

          $relIds = array();
          foreach ($related AS $rel) {
            $relIds[] = $rel->get${rel[rhsIdProperty]}();
          }

          $c = new Criteria();
          $c->addEquals('${rel[rhsColumn]}', $id);
          $current = $persister->retrieve($c);

          // Update or save the collection
          ${if:rel[mirrored]}
           foreach ($related AS $rel) {
             $rel->set${rel[rhsProperty]($model);
             $persister->save($model);
           }
            foreach ($current AS $cur) {
              if (!in_array($cur->get${rel[rhsIdProperty]}(), $relIds)) {
                ${if:rel[deleteOrphan]}
                  $persister->delete($cur);
                ${else}
                  $cur->set${rel[rhsProperty]}(null);
                  $persister->save($cur);
                ${fi}
              }
            }
          ${else}
            $updateStmt = $this->_pdo->prepare("UPDATE ${rel[rhsTable]} SET ${rel[rhsColumn]} = :id WHERE ${rel[rhsIdColumn]} = :relId");
            foreach ($related AS $rel) {
              if ($rel->get${rel[rhsIdProperty]}() === null) {
                $persister->create($rel);
              }
              $updateStmt->execute(array(
                'id' => $id,
                'relId' => $rel->get${rel[rhsIdProperty]}()
              ));

              // Clear the cache of the RHS entity as it may contain a stale id
              $persister->clearCache($rel->get${rel[rhsIdProperty]}());
            }

            ${if:rel[deleteOrphan]}
              $orphanStmt = $this->_pdo->prepare("DELETE FROM ${rel[rhsTable]} WHERE ${rel[rhsIdColumn]} = :relId");
            ${else}
              $orphanStmt = $this->_pdo->prepare("UPDATE ${rel[rhsTable]} SET ${rel[rhsColumn]} = null WHERE ${rel[rhsIdColumn]} = : relId");
            ${fi}
            foreach ($current AS $cur) {
              if (!in_array($cur->get${rel[rhsIdProperty]}(), $relIds)) {
                $orphanStmt->execute(array('relId' => $cur->get${rel[rhsIdProperty]}()));
              }

              $persister->clearCache($rel->get${rel[rhsIdProperty]}());
            }
          ${fi}
        ${fi}
        // ---------------------------------------------------------------------
      ${done}

      $saveLock->release();

      if ($startTransaction) {
        $this->_pdo->commit();
      }

      ${if:onUpdate}
        $model->onUpdate();
      ${fi}

      ${if:has_update}
        return $rowCount;
      ${else}
        return 1;
      ${fi}
      return $rowCount;
    } catch (PDOException $e) {
      $this->_pdo->rollback();
      $saveLock->forceRelease();

      throw new Exception("Error updating ${class_str}: {$e->getMessage()}", $e);
    }
  }
}
